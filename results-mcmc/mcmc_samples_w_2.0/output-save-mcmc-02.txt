[14] run_simulation(json_path::String; is_path::Bool, kwargs::@Kwargs{verbose::Bool})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:170
 [15] pyjlany_call(self::typeof(HallThruster.run_simulation), args_::Py, kwargs_::Py)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl:40
 [16] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/base.jl:73
 [17] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
    @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/C.jl:63
Simulation exited at t = 0.0007171717171717171 with retcode :error in 41.102619824 seconds.
Simulation completed in 41.10 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
Invalid prior: log10(alpha)=-0.021513085054135312 is out of range [0, 2].
log_prior = -inf, log_likelihood = -5658513241063.518, log_posterior = -inf
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.683146407 seconds.
Simulation completed in 7.69 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 1.7718670486902524, alpha_log = 0.00035542500481857255, v1 = 59.138056612118085, v2 = 59.1864747898164
Running simulation with v1: 59.138056612118085, v2: 59.1864747898164
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 4.332611776 seconds.
Simulation completed in 4.34 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.217630341842891, log_likelihood = -2925661475197.877, log_posterior = -2925661475203.0947
DEBUG: v1_log = 1.762318702425025, alpha_log = 0.024329414514077087, v1 = 57.85204327892307, v2 = 61.185444146722595
Running simulation with v1: 57.85204327892307, v2: 61.185444146722595
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 5.790039255 seconds.
Simulation completed in 5.80 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.198671084111317, log_likelihood = -1384458323670.9832, log_posterior = -1384458323676.182
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.871685446 seconds.
Simulation completed in 7.87 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 2.132414270519405, alpha_log = 0.017260863365276106, v1 = 135.64827349587958, v2 = 141.1481316611018
Running simulation with v1: 135.64827349587958, v2: 141.1481316611018
Starting simulation...
Running simulation...
InexactError: trunc(Int64, 3.035642007484474e19)
Stacktrace:
  [1] trunc
    @ ./float.jl:905 [inlined]
  [2] rate_coeff
    @ ~/.julia/packages/HallThruster/gEpeB/src/collisions/reactions.jl:41 [inlined]
  [3] freq_electron_neutral
    @ ~/.julia/packages/HallThruster/gEpeB/src/collisions/collision_frequencies.jl:8 [inlined]
  [4] freq_electron_neutral(params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, i::Int64)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/collisions/collision_frequencies.jl:16
  [5] update_electrons!(params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, t::Float64)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/update_electrons.jl:30
  [6] solve(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, tspan::Tuple{Float64, Float64}; saveat::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:89
  [7] solve
    @ ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:31 [inlined]
  [8] macro expansion
    @ ./timing.jl:503 [inlined]
  [9] run_from_setup(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}; duration::Float64, nsave::Int64, verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:278
 [10] run_simulation(config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}; duration::Float64, nsave::Int64, verbose::Bool, kwargs::@Kwargs{grid::HallThruster.HallThrusterGrid{Returns{Float64}}, dt::Float64, adaptive::Bool, dtmin::Float64, dtmax::Float64, max_small_steps::Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:302
 [11] run_simulation(json_content::JSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}}, dir::String; verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:156
 [12] run_simulation(json_path::String; is_path::Bool, kwargs::@Kwargs{verbose::Bool})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:170
 [13] pyjlany_call(self::typeof(HallThruster.run_simulation), args_::Py, kwargs_::Py)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl:40
 [14] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/base.jl:73
 [15] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
    @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/C.jl:63
Simulation exited at t = 0.0006868686868686869 with retcode :error in 44.757029311 seconds.
Simulation completed in 44.76 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.966894455725375, log_likelihood = -5639437841475.901, log_posterior = -5639437841481.868
DEBUG: v1_log = 1.8274763470783537, alpha_log = 0.002276876841716856, v1 = 67.21657000450215, v2 = 67.56989186727951
Running simulation with v1: 67.21657000450215, v2: 67.56989186727951
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 4.656227063 seconds.
Simulation completed in 4.66 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.328954364966372, log_likelihood = -2130814510573.0244, log_posterior = -2130814510578.3533
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.610706635 seconds.
Simulation completed in 7.61 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
Checkpoint saved at iteration 50. Acceptance rate: 1.00
DEBUG: v1_log = 1.9501469249192316, alpha_log = 0.019059591347803637, v1 = 89.1552505688027, v2 = 93.15507423626399
Running simulation with v1: 89.1552505688027, v2: 93.15507423626399
Starting simulation...
Running simulation...
InexactError: trunc(Int64, 3.167163173642286e19)
Stacktrace:
  [1] trunc
    @ ./float.jl:905 [inlined]
  [2] rate_coeff
    @ ~/.julia/packages/HallThruster/gEpeB/src/collisions/reactions.jl:41 [inlined]
  [3] freq_electron_neutral
    @ ~/.julia/packages/HallThruster/gEpeB/src/collisions/collision_frequencies.jl:8 [inlined]
  [4] freq_electron_neutral(params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, i::Int64)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/collisions/collision_frequencies.jl:16
  [5] update_electrons!(params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, t::Float64)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/update_electrons.jl:30
  [6] solve(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, tspan::Tuple{Float64, Float64}; saveat::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:89
  [7] solve
    @ ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:31 [inlined]
  [8] macro expansion
    @ ./timing.jl:503 [inlined]
  [9] run_from_setup(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}; duration::Float64, nsave::Int64, verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:278
 [10] run_simulation(config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}; duration::Float64, nsave::Int64, verbose::Bool, kwargs::@Kwargs{grid::HallThruster.HallThrusterGrid{Returns{Float64}}, dt::Float64, adaptive::Bool, dtmin::Float64, dtmax::Float64, max_small_steps::Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:302
 [11] run_simulation(json_content::JSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}}, dir::String; verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:156
 [12] run_simulation(json_path::String; is_path::Bool, kwargs::@Kwargs{verbose::Bool})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:170
 [13] pyjlany_call(self::typeof(HallThruster.run_simulation), args_::Py, kwargs_::Py)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl:40
 [14] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/base.jl:73
 [15] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
    @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/C.jl:63
Simulation exited at t = 0.000696969696969697 with retcode :error in 41.189219287 seconds.
Simulation completed in 41.19 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.579995508328158, log_likelihood = -5659858262255.7, log_posterior = -5659858262261.28
DEBUG: v1_log = 1.5228764627889255, alpha_log = 0.003550533041155459, v1 = 33.333158146103685, v2 = 33.60678718562043
Running simulation with v1: 33.333158146103685, v2: 33.60678718562043
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.283714357 seconds.
Simulation completed in 7.29 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.738137749574283, log_likelihood = -239142818139.4151, log_posterior = -239142818144.15323
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.868592644 seconds.
Simulation completed in 7.87 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 1.7536899003959268, alpha_log = 0.016908955819524764, v1 = 56.713950576609726, v2 = 58.96561821895732
Running simulation with v1: 56.713950576609726, v2: 58.96561821895732
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 4.937287985 seconds.
Simulation completed in 4.94 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.181576891080372, log_likelihood = -1406246960921.078, log_posterior = -1406246960926.2595
DEBUG: v1_log = 1.6352735168621118, alpha_log = 0.008830444239732527, v1 = 43.17909313487188, v2 = 44.06603358375012
Running simulation with v1: 43.17909313487188, v2: 44.06603358375012
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.679181539 seconds.
Simulation completed in 7.68 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.950747734519982, log_likelihood = -239917358640.28076, log_posterior = -239917358645.2315
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.418564628 seconds.
Simulation completed in 7.42 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 2.045227488216382, alpha_log = 0.006171378142924041, v1 = 110.97559653979197, v2 = 112.56383123139028
Running simulation with v1: 110.97559653979197, v2: 112.56383123139028
Starting simulation...
Running simulation...
InexactError: trunc(Int64, 2.84121988504653e19)
Stacktrace:
  [1] trunc
    @ ./float.jl:905 [inlined]
  [2] rate_coeff
    @ ~/.julia/packages/HallThruster/gEpeB/src/collisions/reactions.jl:41 [inlined]
  [3] freq_electron_neutral
    @ ~/.julia/packages/HallThruster/gEpeB/src/collisions/collision_frequencies.jl:8 [inlined]
  [4] freq_electron_neutral(params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, i::Int64)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/collisions/collision_frequencies.jl:16
  [5] update_electrons!(params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, t::Float64)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/update_electrons.jl:30
  [6] solve(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, tspan::Tuple{Float64, Float64}; saveat::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:89
  [7] solve
    @ ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:31 [inlined]
  [8] macro expansion
    @ ./timing.jl:503 [inlined]
  [9] run_from_setup(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}; duration::Float64, nsave::Int64, verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:278
 [10] run_simulation(config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}; duration::Float64, nsave::Int64, verbose::Bool, kwargs::@Kwargs{grid::HallThruster.HallThrusterGrid{Returns{Float64}}, dt::Float64, adaptive::Bool, dtmin::Float64, dtmax::Float64, max_small_steps::Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:302
 [11] run_simulation(json_content::JSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}}, dir::String; verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:156
 [12] run_simulation(json_path::String; is_path::Bool, kwargs::@Kwargs{verbose::Bool})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:170
 [13] pyjlany_call(self::typeof(HallThruster.run_simulation), args_::Py, kwargs_::Py)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl:40
 [14] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/base.jl:73
 [15] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
    @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/C.jl:63
Simulation exited at t = 0.000696969696969697 with retcode :error in 41.520045686 seconds.
Simulation completed in 41.52 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.779750605536862, log_likelihood = -5635648222776.437, log_posterior = -5635648222782.216
DEBUG: v1_log = 1.7509325444428159, alpha_log = 0.009378442917324634, v1 = 56.35501172060819, v2 = 57.585214297691024
Running simulation with v1: 56.35501172060819, v2: 57.585214297691024
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 4.424237643 seconds.
Simulation completed in 4.43 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.176122246512178, log_likelihood = -1592582727291.709, log_posterior = -1592582727296.885
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 8.091227204 seconds.
Simulation completed in 8.09 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 0.9916792800534643, alpha_log = -0.033648897262748854, v1 = 9.810232045589453, v2 = 9.078840425808428
Running simulation with v1: 9.810232045589453, v2: 9.078840425808428
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.931736504 seconds.
Simulation completed in 7.93 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
Invalid prior: log10(alpha)=-0.033648897262748854 is out of range [0, 2].
log_prior = -inf, log_likelihood = -275627734425.16876, log_posterior = -inf
DEBUG: v1_log = 1.5627089962613634, alpha_log = 0.011858291836162976, v1 = 36.5349902903107, v2 = 37.54631229342982
Running simulation with v1: 36.5349902903107, v2: 37.54631229342982
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.496812173 seconds.
Simulation completed in 7.50 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.81276226258741, log_likelihood = -240712626858.17563, log_posterior = -240712626862.9884
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.717615219 seconds.
Simulation completed in 7.72 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 2.4721570082697664, alpha_log = 0.015063936922788863, v1 = 296.59034436756883, v2 = 307.05837355421744
Running simulation with v1: 296.59034436756883, v2: 307.05837355421744
Starting simulation...
Running simulation...
InexactError: trunc(Int64, 3.790555172798262e20)
Stacktrace:
  [1] trunc
    @ ./float.jl:905 [inlined]
  [2] rate_coeff
    @ ~/.julia/packages/HallThruster/gEpeB/src/collisions/reactions.jl:41 [inlined]
  [3] apply_reactions!(dU::Matrix{Float64}, U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/sourceterms.jl:28
  [4] iterate_heavy_species!(dU::Matrix{Float64}, U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}; apply_boundary_conditions::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/update_heavy_species.jl:41
  [5] iterate_heavy_species!
    @ ~/.julia/packages/HallThruster/gEpeB/src/simulation/update_heavy_species.jl:1 [inlined]
  [6] integrate_heavy_species!(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, dt::Float64, apply_boundary_conditions::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/update_heavy_species.jl:67
  [7] integrate_heavy_species!
    @ ~/.julia/packages/HallThruster/gEpeB/src/simulation/update_heavy_species.jl:64 [inlined]
  [8] solve(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}, tspan::Tuple{Float64, Float64}; saveat::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:78
  [9] solve
    @ ~/.julia/packages/HallThruster/gEpeB/src/simulation/solution.jl:31 [inlined]
 [10] macro expansion
    @ ./timing.jl:503 [inlined]
 [11] run_from_setup(U::Matrix{Float64}, params::@NamedTuple{ncells::Int64, ncharge::Int64, mi::Float64, config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}, ϕ_L::Float64, ϕ_R::Float64, Te_L::Float64, Te_R::Float64, L_ch::Float64, A_ch::Float64, z_cell::Vector{Float64}, z_edge::Vector{Float64}, index::@NamedTuple{ρn::Int64, ρi::Vector{Int64}, ρiui::Vector{Int64}}, cache::@NamedTuple{Aϵ::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}, bϵ::Vector{Float64}, nϵ::Vector{Float64}, B::Vector{Float64}, νan::Vector{Float64}, νc::Vector{Float64}, μ::Vector{Float64}, ϕ::Vector{Float64}, ∇ϕ::Vector{Float64}, ne::Vector{Float64}, ϵ::Vector{Float64}, Tev::Vector{Float64}, pe::Vector{Float64}, ue::Vector{Float64}, ∇pe::Vector{Float64}, νen::Vector{Float64}, νei::Vector{Float64}, radial_loss_frequency::Vector{Float64}, νew_momentum::Vector{Float64}, νiw::Vector{Float64}, νe::Vector{Float64}, κ::Vector{Float64}, F::Matrix{Float64}, UL::Matrix{Float64}, UR::Matrix{Float64}, Z_eff::Vector{Float64}, λ_global::Vector{Float64}, νiz::Vector{Float64}, νex::Vector{Float64}, K::Vector{Float64}, Id::Vector{Float64}, ji::Vector{Float64}, ni::Matrix{Float64}, ui::Matrix{Float64}, Vs::Vector{Float64}, niui::Matrix{Float64}, nn::Vector{Float64}, k::Matrix{Float64}, u1::Matrix{Float64}, γ_SEE::Vector{Float64}, cell_cache_1::Vector{Float64}, error_integral::Vector{Float64}, Id_smoothed::Vector{Float64}, anom_multiplier::Vector{Float64}, smoothing_time_constant::Vector{Float64}, errors::Vector{Float64}, dcoeffs::Vector{Float64}, ohmic_heating::Vector{Float64}, wall_losses::Vector{Float64}, inelastic_losses::Vector{Float64}, channel_area::Vector{Float64}, dA_dz::Vector{Float64}, channel_height::Vector{Float64}, inner_radius::Vector{Float64}, outer_radius::Vector{Float64}, tanδ::Vector{Float64}, anom_variables::Vector{Vector{Float64}}, dt_iz::Vector{Float64}, dt_E::Vector{Float64}, dt_u::Vector{Float64}, dt::Vector{Float64}}, fluids::Vector{HallThruster.Fluid}, fluid_ranges::Vector{UnitRange{Int64}}, species_range_dict::Dict{Symbol, UnitRange{Int64}}, is_velocity_index::Vector{Bool}, iteration::Vector{Int64}, ionization_reactions::Vector{HallThruster.IonizationReaction}, ionization_reactant_indices::Vector{Int64}, ionization_product_indices::Vector{Int64}, excitation_reactions::Vector{HallThruster.ExcitationReaction}, excitation_reactant_indices::Vector{Int64}, electron_neutral_collisions::Vector{HallThruster.ElasticCollision}, dt::Vector{Float64}, CFL::Float64, adaptive::Bool, background_neutral_velocity::Float64, background_neutral_density::Float64, Bmax::Float64, γ_SEE_max::Float64, Δz_cell::Vector{Float64}, Δz_edge::Vector{Float64}, control_current::Bool, target_current::Float64, Kp::Float64, Ti::Float64, Td::Float64, exit_plane_index::Int64, dtbase::Float64, dtmin::Float64, dtmax::Float64, max_small_steps::Int64, pe_factor::Float64}; duration::Float64, nsave::Int64, verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:278
 [12] run_simulation(config::HallThruster.Config{HallThruster.TwoZoneBohm, HallThruster.Mitchner, HallThruster.WallSheath, HallThruster.IonizationLookup, HallThruster.ExcitationLookup, HallThruster.ElectronNeutralLookup, HallThruster.Thruster{HallThruster.LinearInterpolation{Vector{Float64}, Vector{Float64}}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Vector{Returns{Float64}}, Returns{Float64}, Returns{Float64}, HallThruster.DefaultInitialization, HallThruster.HyperbolicScheme{typeof(HallThruster.rusanov), HallThruster.var"#22#23"}}; duration::Float64, nsave::Int64, verbose::Bool, kwargs::@Kwargs{grid::HallThruster.HallThrusterGrid{Returns{Float64}}, dt::Float64, adaptive::Bool, dtmin::Float64, dtmax::Float64, max_small_steps::Int64})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/simulation.jl:302
 [13] run_simulation(json_content::JSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}}, dir::String; verbose::Bool)
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:156
 [14] run_simulation(json_path::String; is_path::Bool, kwargs::@Kwargs{verbose::Bool})
    @ HallThruster ~/.julia/packages/HallThruster/gEpeB/src/simulation/json.jl:170
 [15] pyjlany_call(self::typeof(HallThruster.run_simulation), args_::Py, kwargs_::Py)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/any.jl:40
 [16] _pyjl_callmethod(f::Any, self_::Ptr{PythonCall.C.PyObject}, args_::Ptr{PythonCall.C.PyObject}, nargs::Int64)
    @ PythonCall.JlWrap ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/base.jl:73
 [17] _pyjl_callmethod(o::Ptr{PythonCall.C.PyObject}, args::Ptr{PythonCall.C.PyObject})
    @ PythonCall.JlWrap.Cjl ~/.julia/packages/PythonCall/Nr75f/src/JlWrap/C.jl:63
Simulation exited at t = 0.0006767676767676767 with retcode :error in 42.117316744 seconds.
Simulation completed in 42.12 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -6.732403747449905, log_likelihood = -5618591742112.378, log_posterior = -5618591742119.11
DEBUG: v1_log = 1.677208970241861, alpha_log = -0.01222082318739879, v1 = 47.55639988669849, v2 = 46.23684020764177
Running simulation with v1: 47.55639988669849, v2: 46.23684020764177
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 8.108374904 seconds.
Simulation completed in 8.11 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
Invalid prior: log10(alpha)=-0.01222082318739879 is out of range [0, 2].
log_prior = -inf, log_likelihood = -251274770556.68695, log_posterior = -inf
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.775861183 seconds.
Simulation completed in 7.78 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 1.4328803338297866, alpha_log = -0.018817950491315374, v1 = 27.09444964389474, v2 = 25.945520244473215
Running simulation with v1: 27.09444964389474, v2: 25.945520244473215
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.788870616 seconds.
Simulation completed in 7.79 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
Invalid prior: log10(alpha)=-0.018817950491315374 is out of range [0, 2].
log_prior = -inf, log_likelihood = -242024042261.89352, log_posterior = -inf
DEBUG: v1_log = 1.711546567890213, alpha_log = 0.0022057015976202177, v1 = 51.46909925840583, v2 = 51.73116625523536
Running simulation with v1: 51.46909925840583, v2: 51.73116625523536
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 5.27056732 seconds.
Simulation completed in 5.27 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.098623257251115, log_likelihood = -1180701480641.502, log_posterior = -1180701480646.6006
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.906001671 seconds.
Simulation completed in 7.91 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 0.9986729119632599, alpha_log = 0.02044245154283227, v1 = 9.969489308701373, v2 = 10.449977695956743
Running simulation with v1: 9.969489308701373, v2: 10.449977695956743
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.698301729 seconds.
Simulation completed in 7.70 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -3.8299827049404285, log_likelihood = -268758302243.4258, log_posterior = -268758302247.2558
DEBUG: v1_log = 1.7908821690172712, alpha_log = 0.002872633331115915, v1 = 61.78487452293925, v2 = 62.194904077468635
Running simulation with v1: 61.78487452293925, v2: 62.194904077468635
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 4.857122353 seconds.
Simulation completed in 4.86 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -5.2555226714530106, log_likelihood = -1519160129842.6309, log_posterior = -1519160129847.8865
DEBUG: v1_log = 1.634221424066226, alpha_log = 0.0025336969347197077, v1 = 43.074616948323296, v2 = 43.326651012759996
Running simulation with v1: 43.074616948323296, v2: 43.326651012759996
Starting simulation...
Running simulation...
Simulation exited at t = 0.001 with retcode :success in 7.655282841 seconds.
Simulation completed in 7.66 seconds.
Applying time-averaging to the simulation results...
Time-averaged metrics successfully extracted.
Keys in simulated_data: dict_keys(['thrust', 'time', 'discharge_current', 'z_normalized', 'ion_velocity'])
Keys in observed_data: dict_keys(['thrust', 'discharge_current', 'time', 'z_normalized', 'ion_velocity'])
log_prior = -4.94872831212409, log_likelihood = -238784483139.84488, log_posterior = -238784483144.7936
DEBUG: v1_log = 2.05559167324096, alpha_log = -0.0172211841877254, v1 = 113.65581832302341, v2 = 109.23718224379122
Running simulation with v1: 113.65581832302341, v2: 109.23718224379122
Starting simulation...
Running simulation...
